oopDesc类，两个成员变量_mark是一种标记和_metadat表示元数据。
JVM虚拟机在加载字节码程序时,会记录字节码中定义的所有类型的原始信息,JVM知道程序中包含了哪些类,以及每个类中所关联的字段,方法,父类等信息. 因为JVM需要保存字节码中的类元信息,所以JVM演化出了OOP-KLASS这种二分模型,KLASS用于保存类元信息,而OOP用于表示JVM创建的实例对象.KLASS被保存在PERM永久区,二OOP分配在HEAP堆区.
3.5 Java在不同平台上数据寄存的顺序不同,衍生了底层2个概念-大端于小端. 各种计算机体系结构中, 对于字节, 字等存储机制不同, 通讯双方交流的信息单元的存储顺序不同, 因此需要考虑双方数据的传送顺序. 存储机制: Big-Endian 和 Little-Endian, 大端和小端.
- Little-Endian就是低位字节排放在内存的低地址段,高位字节排放在内存的高地址端.
- Big-Endian就是高位字节排放在内存的低地址段,低位字节排放在内存的高地址端.
- 网络字节序,TCP/IP中使用的字节序通常称为网络字节序, TCP/IP各层协议将字节序定义为Big-Endian
大小端的问题,本质是由寄存器引起的,最终在内存的存储顺序上反映出来. 当关注网络传输和文件共享时,由于两端的CPU架构并不总相同,不进行大小端模式的转换则数据会出现不一致. 
- 在单机上使用同一种编程语言读写,可以无视大小端模式, 字节序相同
- 在分布式场景下,使用同一种编程语言,在同样大小端模式的不同机器上读写,字节序相同
3.6 数据结构可以更好的描述客观世界,描述任意复杂的事物,这就是数据结构的意义. 数据结构的实现机制是,编译时变成字节码, 运行期实现. 
