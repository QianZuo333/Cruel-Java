6.2.2 非静态变量偏移量 稍复杂. 对于一个Java类, 其主要的内存空间便是其非静态类型的变量所占用的空间. 
 1. 计算非静态变量起始偏移量. 相当于未来即将new出来的Java实例在JVM内部对应的instanceOop对象实例首地址的偏移位置
 2. 内存对齐于字段重排. 如果一个变量的内存起始地址恰好等于其长度的整数倍, 就被称作自然对齐. 不同平台对存储空间处理大不相同, 保证字节对齐可以确保CPU访问时不会出错. 一般编译器会自动将数据进行对齐补白. 程序员可以自主优化， 比如将相同类型的变量放在一起，节省内存空间. JVM在设计上使其内部5大类型数据都满足内存对齐的原则. 
 重拍策略包括:
 - 相同类型的字段组合在一起
 - 按照double word short byte-oop 的顺序分配
 3. 计算变量偏移量 HotSpot内部实现细节
 4. gap填充 
 5. Java语言于其他语言内存对齐的差异
6.2.3 内存分配总结
规则
1 任何对象都是以8字节为粒度进行对齐的
2 类属性按照优先级排序
3 不同类继承关系的成员不能混合排列
4 父类最后一个属性和子类第一个属性间隔不足4个字节时, 必须扩展到4个字节
5. 如果子类第一个成员是双精度或者长整型, 且父类没有用完8字节, JVM会破坏规则2, 按int short byte reference顺序填充
